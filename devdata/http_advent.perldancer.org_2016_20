<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> send_as BEER => 'Christmas Cheer' | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="send_as_beer___gt___christmas_cheer_"></a>send_as BEER =&gt; 'Christmas Cheer'</h1>

<p>One difference between Dancer and Dancer2 is that serializers are
"Always or never". Sawyer X's <a href="http://advent.perldancer.org/2014/11">2014 advent article</a>
explains why this change was important.</p>
<p>However one question that arose several times during 2015 from keen Dancer2 users was</p>
<pre class="prettyprint">"How do you return HTML from a specific route when we have a
serialization engine configured?"</pre>

<p>Back then, the best advice was to "split" your app into two distinct
applications and use <code>Plack::Builder</code> to glue them back together.</p>
<pre class="prettyprint"># bin/app.psgi
use Plack::Builder;
use MyApp;
use MyApp::API;

builder {
    mount '/api' =&gt; MyApp::API-&gt;to_app;
    mount '/'    =&gt; MyApp-&gt;to_app;
};</pre>

<p>However, if you have a small number of routes that required a template engine
(or a small number that needed a serialization engine), the effort involved
was onerous.</p>
<p>Other suboptimal solutions (including the use of eldritch horrors) were
proposed in issues on github prior to a suggestion to use a combination of
Dancer2's <code>send_file</code> and <code>to_json</code> using an in-memory file handle:</p>
<pre class="prettyprint">set serializer =&gt; 'JSON';
set template   =&gt; 'template_toolkit';

get '/html/route' =&gt; sub {
    my $html = encode( 'UTF-8', template('awesome_template') );
    content_type =&gt; ''text/html; charset=UTF-8';
    send_file \$html;     # sends html
};</pre>

<p>Which just works; but involves excessive boilerplate and one needs to take
care with text encodings. That's not the Dancer way!</p>
<h2><a name="a_prototype_solution__dancer2__plugin__sendas"></a>A prototype solution: Dancer2::Plugin::SendAs</h2>

<p>Conferences have many benefits! There is the awesome talks, the hallway
track, the benefits of getting a group together and discussing a problem
face-to-face, or just having some time away to think about a particular
problem.</p>
<p>During some conference related downtime in 2015, <a href="https://metacpan.org/module/Dancer2::Plugin::SendAs">Dancer2::Plugin::SendAs</a>
was spec'd and implemented to encapsulate the previous patten into a simple
to use c&lt;send_as&gt; keyword:</p>
<pre class="prettyprint">use Dancer2::Plugin::SendAs;

get '/api/thing' =&gt; sub {
    send_as JSON =&gt; { thing =&gt; { to =&gt; [ 'return' ] } };
};</pre>

<p>Any Dancer2 serializer was supported, as well as HTML output:</p>
<pre class="prettyprint">get '/api' =&gt; sub {
    send_as HTML =&gt; template( 'instructions' );
};</pre>

<p>Simple. Easy. Neat. Now that's the Dancer way!</p>
<h2><a name="from_plugin_to_core"></a>From Plugin to Core</h2>

<p>The <code>SendAs</code> plugin solved a problem many Dancers' encountered. The core
team decided to move the plugins' functionality into core in early 2016.
(Did you know the <code>to_json</code> and <code>from_json</code> keywords started as a plugin too?)</p>
<p>After cleaning up some edge cases and tweaking features, c&lt;send_as&gt; became
a core keyword in the c&lt;0.200000&gt; release.</p>
<p>The key differences in the core implemantation are</p>
<ul>
<li><a name="item_Serializers_must_use_the_appropriate_casing_of_their_names__eg___code_JSON__code__or__code_Sereal__code_____code_HTML__code__is_special_cased_for_returning_HTML_content__and_must_be_in_upper_case_"></a><b>Serializers must use the appropriate casing of their names. eg.
<code>JSON</code> or <code>Sereal</code>.  <code>HTML</code> is special cased for returning HTML
content, and must be in upper case.</b>
</li>
<li><a name="item_Serializers_will_load_settings_from_the_applications_configuration_"></a><b>Serializers will load settings from the applications configuration.</b>
</li>
</ul>
<p>Like <code>send_file</code>, the <code>send_as</code> keyword returns immediately from a route,
allowing <code>send_as</code> to short-circuit route logic, even when a
serializer is defined:</p>
<pre class="prettyprint">set serializer =&gt; 'JSON';
set template   =&gt; 'template_toolkit';

post '/api/:id' =&gt; sub {
    my $id = request-&gt;route_parameter-&gt;get('id');
    if ( $id !~ m/^[0-9]+$/ ) {
        # send HTML error page
        status 500;
        send_as HTML =&gt; template('error');
    }
    # Continue with the rest of route logic if id was an integer
    # Returns JSON content
    ...
};</pre>

<p><code>Dancer2::Plugin::SendAs</code> remains on the CPAN (deprecated) for
posterity.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Russell (veryrusty) Jenkins for
the Perl Dancer Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2016 // Russell (veryrusty) Jenkins</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
