<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Implementing i18n in a Dancer application using Plugin::LogReport | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="implementing_i18n_in_a_dancer_application_using_plugin__logreport"></a>Implementing i18n in a Dancer application using Plugin::LogReport</h1>

<h2><a name="introduction"></a>Introduction</h2>

<p>There are a number of ways to approach the internationalisation of a web
application. I'm going to look at a method using <a href="https://metacpan.org/module/Log::Report">Log::Report</a>, which includes
very comprehensive translation functionality.</p>
<p>More specifically, I will use its Dancer2 plugin,
<a href="https://metacpan.org/module/Dancer2::Plugin::LogReport">Dancer2::Plugin::LogReport</a>. If you haven't already, please look at my other
article on that.</p>
<h2><a name="a_basic_application"></a>A basic application</h2>

<p>Let's get started by creating a basic application with some strings that we want
translated. We'll look at translating the content of templates later.</p>
<pre class="prettyprint"># In your route handler
package MyApp;
use Dancer2;
use Dancer2::Plugin::LogReport 'my-domain'; # domain used to group sets of messages

get '/' =&gt; sub {
    notice "Hello world";
    template 'index';
};

# In the index template
[% FOREACH message IN session.messages %]
    &lt;p&gt;[% message.toString %]&lt;/p&gt;
[% END %]</pre>

<p>By running this application, you should see <code>Hello world</code> on the index page.</p>
<h2><a name="translating_strings"></a>Translating strings</h2>

<p><a href="https://metacpan.org/module/Log::Report">Log::Report</a> has <a href="https://metacpan.org/module/Log::Report#Language-Translations">a lot of functions to translate
strings</a>. We'll touch on 2 of the commonly
used ones here.</p>
<p>To simply translate a fixed string into another, we can use <code>__</code> (2
underscores):</p>
<pre class="prettyprint">notice __"Hello world";</pre>

<p>This might look a bit strange, but the 2 underscores are simply a function. You
can wrap the text in parentheses if you prefer:</p>
<pre class="prettyprint">notice __("Hello world");</pre>

<p>Both the parent <a href="https://metacpan.org/module/Log::Report">Log::Report</a> module and its inspiration <a href="https://metacpan.org/module/Locale::TextDomain">Locale::TextDomain</a>
encourage use of the functions without parentheses though, as it makes the code
a more readable.</p>
<p>Note that you can't use single quotes, as <code>__'</code> is interpreted as <code>::</code> by
Perl</p>
<p>We can also use <code>__x</code>, which is the same as <code>__</code>, except that it allows for
variables within the string. For example:</p>
<pre class="prettyprint">notice __x"Hello {name}", name =&gt; 'Andy';</pre>

<p>This means that when the text is extracted as message IDs, any variable content
is conveniently separated. It also allows all sorts of clever things, such as
adjusting the text for pluralisation depending on variable conditions, but I
won't go into that just yet.</p>
<p>So, for now, update your web application accordingly:</p>
<pre class="prettyprint">get '/' =&gt; sub {
    notice __"Hello world";
    notice __x"Hello {name}", name =&gt; 'Andy';
    template 'index';
};</pre>

<p>The beauty of the above approach, is that initially you can just add (very
easily and unobtrusively) the translation functions to all your strings. Then,
at a later date, you can add the translation framework.</p>
<h2><a name="extracting_and_translating_the_strings"></a>Extracting and translating the strings</h2>

<p>In order to translate the text in the application, we will need some
translation tables. We will produce these below.</p>
<h3><a name="extracting_and_creating_po_translation_tables"></a>Extracting and creating PO translation tables</h3>

<p>An initial template for the tables can be extracted using <a href="https://metacpan.org/module/xgettext-perl">xgettext-perl</a>.
From the base directory of your application run:</p>
<pre class="prettyprint">xgettext-perl -p messages --from-code=iso-8859-1 .</pre>

<p>This will scan the current directory for appropriate Perl files and create a
new directory <code>messages</code> with the strings to be translated as message IDs in a
default <code>.po</code> file. For more information on the module used to extract the
strings, see <a href="https://metacpan.org/module/Log::Report::Extract::PerlPPI">Log::Report::Extract::PerlPPI</a>. Note that the domain specified
in the options for <a href="https://metacpan.org/module/Dancer2::Plugin::LogReport">Dancer2::Plugin::LogReport</a> (or <a href="https://metacpan.org/module/Log::Report">Log::Report</a>) is used
within the filename. Domains can be used to group together sets of messages
(such as if you want to separate groups of messages for different modules).</p>
<p>For the purposes of this exercise, a PO file should have been created
containing the 2 message IDs ("Hello world" and "Hello {name}"). From this
default PO file, create a specific language file in a new directory for this
domain:</p>
<pre class="prettyprint">mkdir messages/my-domain/
cp messages/my-domain.utf-8.po messages/my-domain/de_DE.utf8.po</pre>

<p>Now edit the file, inserting the translation text into the existing lines (the
"fuzzy" flag can be removed to indicate that the text has been translated):</p>
<pre class="prettyprint">#: ./lib/Advent.pm:11
#,
msgid "Hello world"
msgstr "Hallo Welt"
#: ./lib/Advent.pm:12
#,
msgid "Hello {name}"
msgstr "Hallo {name}"</pre>

<h3><a name="adding_a_translator_to_your_application"></a>Adding a translator to your application</h3>

<p>To add a translator, add the following code to your route handler:</p>
<pre class="prettyprint">use Log::Report::Translator::POT;

(textdomain 'my-domain')-&gt;configure(
    translator =&gt; Log::Report::Translator::POT-&gt;new(
        lexicon =&gt; 'messages' # Directory of the PO files
    )
);</pre>

<p>Now run your application, this time specifying another language:</p>
<pre class="prettyprint">LC_MESSAGES=de_DE.utf8 perl bin/app.pl</pre>

<p>When you visit the index page, the text should now have been appropriately
translated.</p>
<h2><a name="translating_text_within_templates"></a>Translating text within templates</h2>

<p>Translating text within templates is very similar to translating strings within
the application, except that being a template, the translation functions aren't
quite so readily available. For the purposes of this example, I'm going to
assume that you're using <code>Template::Toolkit</code>.</p>
<p>As we don't have a readily available translating function, we'll do things the
other way around this time, and start by providing a translating function to each
template. Add the following to your route handler:</p>
<pre class="prettyprint">sub translate {
    my $msg = Log::Report::Message-&gt;fromTemplateToolkit('tt-domain', @_);
    $msg-&gt;toString;
}
 
hook before_template =&gt; sub {
    shift-&gt;{loc}  = \&amp;translate;
};</pre>

<p>The above code adds a subroutine <code>loc</code> that can be called from within each
template. Note that we are using a different domain; this is good practive in
order to keep the sets of messages completely separate, but it's also possible
to use the same domain if you prefer.</p>
<p>As a simple example, add the following to your <code>index</code> template:</p>
<pre class="prettyprint">[% loc("We are dancing") %]</pre>

<p>(See <a href="https://metacpan.org/module/Log::Report::Extract::Template">Log::Report::Extract::Template</a> for more powerful examples.)</p>
<p>Again, we'll need to extract the message IDs for translation. This can be done
in a similar manner to last time, but this time specifying template files:</p>
<pre class="prettyprint">xgettext-perl -p messages --from-code=iso-8859-1 --template TT2-loc --domain tt-domain .</pre>

<p>Note that if you are using the same domain, then this will remove message
strings from your original extractions (unless the same messages appear in the
template files). To prevent this, you can you use the <code>--no-cleanup</code> option,
in which case the previous messages will be commented out. As per the comment
above, it's best to use separate domains for this reason.</p>
<p>Repeat the previous process, copying the default translation to a German file
in the new domain, and add the translation:</p>
<pre class="prettyprint">mkdir messages/tt-domain/
cp messages/tt-domain.utf-8.po messages/tt-domain/de_DE.utf8.po

msgid "We are dancing"
msgstr "Wir tanzen"</pre>

<p>Finally add a new translator for the new domain:</p>
<pre class="prettyprint">(textdomain 'tt-domain')-&gt;configure(
    translator =&gt; Log::Report::Translator::POT-&gt;new(
        lexicon =&gt; 'messages' # Directory of the PO files
    )
);</pre>

<p>Re-run the application, and both the previous string as well as new template
text should be translated.</p>
<h2><a name="handling_plurals"></a>Handling plurals</h2>

<p><a href="https://metacpan.org/module/Log::Report">Log::Report</a> has several translating functions, all detailed
<a href="https://metacpan.org/module/Log::Report#Language-Translations">in the documentation</a>. To give an example,
here's code that handles pluralisation:</p>
<pre class="prettyprint">my @files = ("File") x (int(rand(2))+1);
notice __xn"Saved one file", "Saved {_count} files", @files;</pre>

<h2><a name="author"></a>Author</h2>

<p>This article has been written by Andy Beverley for the Perl
Dancer Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
