<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Reducing boilerplate and managing exports in Dancer2 | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="reducing_boilerplate_and_managing_exports_in_dancer2"></a>Reducing boilerplate and managing exports in Dancer2</h1>

<p>Dancer makes it easy to start small and grow fast. Today we will be
looking at a techique to help manage that growth.</p>
<p>A typical mature Dancer2 app will span multiple packages and each
package will make use of Dancer's plugins and other modules available
on CPAN.</p>
<pre class="prettyprint">use Scalar::Util qw&lt; blessed &gt;;
use List::Util   qw&lt; first all none sum &gt;;
use Dancer2 appname =&gt; 'MyApp';
use Dancer2::Plugin::DBIC qw&lt; schema resultset &gt;;
use Dancer2::Plugin::Redis;</pre>

<p>After the first couple of files, the copy-pasting becomes tedious. If
you later change your mind about what to include, you leave yourself
open to errors when you try to call a function you never imported into
the package namespace.</p>
<h2><a name="what_dancer2_exports"></a>What Dancer2 exports</h2>

<p>As a web framework, Dancer2 provides you with many keywords you can use
to write your web code. Usually, this presents no problem, but in some
cases Dancer2 might give you a function with the same name as a
function in another module you wish to use. For example, Dancer2
provides a function <code>any</code>, so you can write endpoints that work on
multiple HTTP verbs, while <a href="https://metacpan.org/module/List::Util">List::Util</a> provides <code>any</code>, a function
which returns a true value if at least one item in a list matches a
condition.</p>
<p>If you want to use <a href="https://metacpan.org/module/List::Util/any">List::Util/any</a> in a package where Dancer2 has
been <code>use</code>d, you will find you cannot import both at once. Instead,
you can qualify the <code>any</code> from <a href="https://metacpan.org/module/List::Util">List::Util</a>:</p>
<pre class="prettyprint">any '/page/:id' =&gt; sub {
  my $id = param('id');
  send_error("Blocked!", 401)
      if List::Util::any { $_ eq $id } @blocked_resources;
  template 'page', { id =&gt; $id };
};</pre>

<p>If you're using the <code>any</code> from List::Util more frequently than
Dancer's <code>any</code>, then you might decide you prefer to qualify the latter
and import the former.</p>
<p>However, you cannot selectively import functions from Dancer2, and you
cannot use the qualified form <code>Dancer2::any</code>, because there isn't
actually an <code>any</code> function in the <code>Dancer2</code> package.</p>
<p>The reason for this is that Dancer2's <code>import</code> function (which is
called when you <code>use</code> it) does something clever, so that you can have
multiple separate Dancer2 apps running in the same perl instance.</p>
<pre class="prettyprint">use Dancer2 appname =&gt; 'MyApp';</pre>

<p>NB: See <a href="http://advent.perldancer.org/2014/10">http://advent.perldancer.org/2014/10</a> for more on <code>appname</code>
and running multiple apps.</p>
<p>At this point, rather than exporting the function in the usual way,
Dancer2 creates a new function in your package namespace, which calls a
method of the same name on a <a href="https://metacpan.org/module/Dancer2::Core::App">Dancer2::Core::App</a> object which it has
created for you (NB: most of the methods are actually in the
<a href="https://metacpan.org/module/Dancer2::Role::DSL">Dancer2::Role::DSL</a> class).</p>
<p><b>So is there any way to control which parts of Dancer's DSL to import?</b></p>
<p>The answer is yes - but you need to write another package of your own
to act as a fa&#xe7;ade.</p>
<h2><a name="write_your_own_dsl"></a>Write your own DSL</h2>

<p>The solution is to write a package which <code>use</code>s Dancer, and which
provides the syntax you want to all your other packages.</p>
<p>A simple package would look like:</p>
<pre class="prettyprint">package MyApp::DSL;
use Dancer2 appname =&gt; MyApp;
use Exporter;
1;</pre>

<p>(NB: DSL stands for "Domain Specific Language", and in this case is
just a small collection of functions. Dancer is a DSL for writing
Plack-based web apps).</p>
<p>This would provide access to the Dancer DSL as follows:</p>
<pre class="prettyprint">use MyApp::DSL;
MyApp::DSL::get('/' =&gt; sub { ... });</pre>

<p>Having to prefix everything with <code>MyApp::DSL::</code> isn't very nice, though.</p>
<p>Modules like <a href="https://metacpan.org/module/Exporter">Exporter</a> provide a way to explicitly request that
symbols be exported, for instance:</p>
<pre class="prettyprint">package MyApp::DSL;
use Dancer2 appname =&gt; 'MyApp';
use Exporter qw&lt; import &gt;;

our @EXPORT_OK = qw&lt; get post put any del &gt;;
1;</pre>

<p>Now you can write:</p>
<pre class="prettyprint">use MyApp::DSL qw&lt; get post put del &gt;;
get '/' =&gt; sub { ... };</pre>

<p>Or maybe in another route, you just want to retrieve values from your
config? That's ok, too:</p>
<pre class="prettyprint">use MyApp::DSL qw&lt; config &gt;;
my @plugins = keys %{ config('plugins') };</pre>

<p>By listing functions in <code>@EXPORT_OK</code>, we have allowed them to be
exported when they are specified in the <code>use</code> statement.</p>
<p>Note that a limitation of this approach is that you need at least one
package per app. If you're only running one app then this won't be an
issue.</p>
<h2><a name="group_your_exports_with_tags"></a>Group your exports with tags</h2>

<p>Chances are you don't want to name each and every function you need in
your <code>use</code> statement in every. Luckily, Exporter provides more
options, too. Populating <code>@EXPORT</code> will cause those functions to
always be exported. You can also use <code>%EXPORT_TAGS</code> to export groups
of symbols.</p>
<p>Don't forget, it's not just Dancer2's functions that you can put in
your DSL package. If you have other functions you use frequently and
want to make available across your whole app (such as
<a href="https://metacpan.org/module/Scalar::Util/blessed">Scalar::Util/blessed</a>), you can add them too.</p>
<p>This also gives you the opportunity to think about separation of
concerns: for instance, you may decide that your route handling
packages need access to all of Dancer2's functions, whereas the
packages which handle your business logic and flow control don't need
the route handling functions, while your schema packages have yet
another set of functions.</p>
<p>One strategy therefore is to create a different tag for each group of
concerns, e.g. <code>:controller</code>, <code>:model</code>, <code>:route</code>, etc.
Alternatively, the tags could represent where the functions come from,
e.g. <code>:util</code>, <code>:config</code>, <code>:storage</code>, <code>:routing</code>, etc.</p>
<p>So now you know enough to be able to replace</p>
<pre class="prettyprint">use Scalar::Util qw&lt; blessed &gt;;
use List::Util qw&lt; first all none sum &gt;;
use Dancer2 appname =&gt; 'MyApp';
use Dancer2::Plugin::DBIC qw&lt; schema resultset &gt;;
use Dancer2::Plugin::Redis;</pre>

<p>with an expression like:</p>
<pre class="prettyprint">use MyApp::DSL qw&lt; :util :storage :config &gt;;</pre>

<p>or:</p>
<pre class="prettyprint">use MyApp::DSL qw&lt; :model &gt;;</pre>

<h2><a name="author"></a>Author</h2>

<p>This article was written by
Daniel Perrett <code>&lt;perrettdl@googlemail.com&gt;</code> for the Perl Dancer
Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>&#xa9; 2016 Daniel Perrett; you are free to reuse code without restriction and text
under the <a href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike License 4.0</a>.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
