<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> change_session_id | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="change_session_id"></a>change_session_id</h1>

<p>It is considered good security practice, and is a requirement of a number
of established security standards, to change session ID on any change of
privilege level. For starters you should consider doing this on user login,
and possibly at any other time a user has some privilege added or removed.</p>
<h2><a name="session_destruction"></a>Session destruction</h2>

<p>Destroying a session in <a href="https://metacpan.org/module/Dancer2">Dancer2</a> has always been possible using
<a href="https://metacpan.org/module/Dancer2::Core::App/destroy_session">Dancer2::Core::App/destroy_session</a> like so:</p>
<pre class="prettyprint">app-&gt;destroy_session;</pre>

<p>Session destruction by its very nature causes the session ID to change since
the server instructs the client to forget the session ID, send it a new
session ID and also destroys any session data held on the server.  This is
considered a "good thing" when a user logs out of an application but it is
not very useful when a user logs in and you want to keep existing session
data such as cart products.</p>
<h2><a name="change_session_id"></a>change_session_id</h2>

<p><a href="https://metacpan.org/module/Dancer2::Core::App/change_session_id">Dancer2::Core::App/change_session_id</a> to the rescue!</p>
<p>If you are using version 0.610 or later of <a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Extensible">Dancer2::Plugin::Auth::Extensible</a>
to handle authentication and authorisation then you already have
<code>change_session_id</code> called on successful login. If you are using some
other solution then you want to do something like this:</p>
<pre class="prettyprint">post '/login' =&gt; sub {
    my $username = body_parameters-&gt;get("username");
    my $password = body_parameters-&gt;get("password");

    if ( my_authentication_check( $username, $password ) ) {
        # login successful
        app-&gt;change_session_id;
    }
};</pre>

<p>You might also want to consider calling <code>change_session_id</code> after successful
password change.</p>
<h2><a name="the_gory_details"></a>The gory details</h2>

<p>This part is particularly relevant to implementors of session engines.</p>
<h3><a name="native_session_engine_support"></a>Native session engine support</h3>

<p>All session engines should implement the private method <code>_change_id</code>
which is called like so:</p>
<pre class="prettyprint">$session_engine-&gt;_change_id( $old_id, $new_id )</pre>

<p>Where <code>$old_id</code> and <code>$new_id</code>
are the old and new session IDs respectively.</p>
<p>The session engine should do
whatever is necessary for the ID change to be successful such as changing
the key used in the session storage.</p>
<p>All file-based session engines including <a href="https://metacpan.org/module/Dancer2::Session::YAML">Dancer2::Session::YAML</a> and
<a href="https://metacpan.org/module/Dancer2::Session::JSON">Dancer2::Session::JSON</a> get native support for <code>change_session_id</code>
since they consume the <a href="https://metacpan.org/module/Dancer2::Core::Role::SessionFactory::File">Dancer2::Core::Role::SessionFactory::File</a> which
provides <code>_change_id</code>.</p>
<h3><a name="non_native_fallback_support"></a>Non-native fallback support</h3>

<p>If you have a session engine that doesn't implement <code>_change_id</code> then don't
worry: we added a fallback mechanism to <a href="https://metacpan.org/module/Dancer2">Dancer2</a> which does this:</p>
<pre class="prettyprint">my $session = $self-&gt;session;

# grab data, destroy session and store data again
my %data = %{$session-&gt;data};

# destroy existing session
$self-&gt;destroy_session;

# get new session
$session = $self-&gt;session;

# write data from old session into new
# Some engines add session id to data so skip id.
while (my ($key, $value) = each %data ) {
    $session-&gt;write($key =&gt; $value) unless $key eq 'id';
}

# clear out destroyed session - no longer relevant
$self-&gt;clear_destroyed_session;</pre>

<p>This fallback mechanism will hopefully be removed some time in the future.</p>
<h2><a name="further_reading"></a>Further reading</h2>

<p><a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet">OWASP Session Management Cheat Sheet</a>.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Peter Mottram for the Perl
Dancer Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2016 // Peter Mottram (SysPete) <code>&lt;peter@sysnix.com&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
