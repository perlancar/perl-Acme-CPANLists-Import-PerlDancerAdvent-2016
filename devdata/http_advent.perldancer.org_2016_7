<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Medium-Scale Dancer, Part 5: REST APIs and JSON | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="medium_scale_dancer__part_5__rest_apis_and_json"></a>Medium-Scale Dancer, Part 5: REST APIs and JSON</h1>

<p>In previous parts of <a href="https://metacpan.org/module//2016/3">this article series</a>, I defined each
route handler as a one-liner, like so:</p>
<pre class="prettyprint">prefix '/mf' =&gt; sub {
    get '' =&gt; \&amp;retrieve;
    prefix '/sf' =&gt; sub {
        get  ''     =&gt; \&amp;_get;
        post ''     =&gt; \&amp;_post;
        put  ''     =&gt; \&amp;_put;
        del  '/:id' =&gt; \&amp;_del;
    };
};</pre>

<p>This is very much on purpose, despite the fact that Dancer lets you
define all of the code for each route handler within an anonymous code
reference (e.g. <code>sub { ... }</code>) block. What do we get by moving those
functions elsewhere, and what do we gain that makes it worth tolerating
the ugly <code>\&amp;</code> syntax?</p>
<p>The first benefit we get from doing that is that named subroutines make
stack traces easier to read.</p>
<p>Second &#x2014; and far more important to our purposes here in this article
series &#x2014; defining your routes this way makes the URL structure of the
web app explicit in the code. You are more likely to notice design
problems by studying the indented route definitions in the Perl code
than by looking at your app's <code>views</code> subdirectory, even if it is
structured exactly the same way as recommended in an earlier article in
this series, simply because it is atypical to be looking at a full tree
view of a filesystem. You end up with a kind of tunnel vision when
looking at one directory at a time.</p>
<p>This practice of defining Dancer route handlers as one-liners solves
that. It ensures that every time you adjust the route handlers for your
site, you're doing so while looking at the neighboring routes; you will
be defining new routes in context, not independently. This counteracts
the entropic forces that result in API design drift because it
implicitly encourages you to define new routes that fit logically into
the scheme you defined previously. Without this extra Perl function call
layer, the route definitions are visually broken up, so that you cannot
see the whole design on a single screen. The resulting URL scheme can
turn into a mess, as developers hack on the app over the course of
years.</p>
<p>This is also why I have carefully lined up the blocks and
<a href="https://en.wikipedia.org/wiki/Fat_comma">fat commas</a> in the route
definitions: I want patterns in the URL scheme to jump out at me.
Left-justifying everything obscures these patterns.</p>
<p>Now you may be asking, why does all this matter?</p>
<p>The reason is simple: When you make patterns in the URL scheme
graphically apparent, you may discover some previously hidden practical
value that was just sitting there waiting to be exploited. It works for
the same reason that seeing a plot for a numeric data set for the first
time sometimes creates a clear call to action.</p>
<p>It turns out that the example route scheme we've been defining
throughout this article series includes a web API; it's just been
sitting there, waiting to be discovered. With a bit of polishing, it
might even turn into a proper
<a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a>
API. Let's try.</p>
<p>Look back up at that route definition block above. What does it remind
you of? If you said
<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>,
go to the head of the class.</p>
<p>Now, HTTP verbs do not correspond directly to CRUD because HTTP was not
designed to be a CRUD API. There are competing design philosophies when
it comes to mapping HTTP verbs to the CRUD model of persistent data
storage.</p>
<p>I prefer this mapping:</p>
<pre class="prettyprint">  DB term    | HTTP verb
+------------+----------
| C = create | POST
| R = read   | GET
| U = update | PUT
| D = delete | DELETE</pre>

<p>The R = <code>GET</code> and D = <code>DELETE</code> rules are obvious, but it may not be
clear to you why the other two rules are correct.</p>
<p><a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">The HTTP spec</a>
defines <code>POST</code> and <code>PUT</code> so that they're nearly interchangeable, which
is how we ended up with competing REST/CRUD API design philosophies.</p>
<p>Some web API designers like to use <code>POST</code> for both create and update
operations since you can distinguish the cases based on whether the
HTTP request contains a database row ID: if so, it's a request to update
an existing record, else it's a record creation request.</p>
<p>That justification is fine in a web framework that defines the URL
scheme in the file system, such as PHP, ASP, or JSP since it is normal
to handle all four verbs in a single file in that sort of web framework.
In Dancer, my preferred scheme works better since it defines one route
per CRUD operation.</p>
<p>Although the HTTP spec defines <code>PUT</code> and <code>POST</code> as partially
interchangeable, you must not swap the <code>PUT</code> and <code>POST</code> verbs from the
way I've defined them above. The HTTP spec says
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.1"><code>PUT</code> is idempotent</a>, meaning
that the browser is allowed to cache <code>PUT</code> requests, suppressing
subsequent identical calls if the request parameters do not change. In
CRUD terms, this means that if you define "create" in terms of <code>PUT</code>,
the browser might not let you create two records with identical
contents but different IDs, which means you risk losing data. The HTTP
spec does not allow browsers to assume that identical <code>POST</code> calls are
idempotent, however, so we use that verb for CRUD's create operation,
leaving <code>PUT</code> = update.</p>
<p>That's enough design philosophy; how does all that affect our Dancer
code? We might decide that since we've almost got a REST API here that
we might want to push it the rest of the way.</p>
<p>Let's move the CRUD-like route handlers in
<code>lib/App/MajorFeature/SubFeature.pm</code> to
<code>lib/App/API/MajorFeature/SubFeature.pm</code>. We can also refine the
programming interface a bit:</p>
<pre class="prettyprint">prefix '/api' =&gt; sub {
    prefix '/mf' =&gt; sub {
        prefix '/sf' =&gt; sub {
            post ''     =&gt; \&amp;_post;
            get  ''     =&gt; \&amp;_get;
            put  '/:id' =&gt; \&amp;_put;
            del  '/:id' =&gt; \&amp;_del;
        };
    };
};</pre>

<p>My choice to use leading underscores in these module-internal route
handler function names lets us parallel the Dancer DSL keyword naming
scheme.</p>
<p>You might instead prefer to make the HTTP-to-CRUD mapping more explicit:</p>
<pre class="prettyprint">prefix '/api' =&gt; sub {
    prefix '/mf' =&gt; sub {
        prefix '/sf' =&gt; sub {
            post ''     =&gt; \&amp;_create;
            get  ''     =&gt; \&amp;_read;
            put  '/:id' =&gt; \&amp;_update;
            del  '/:id' =&gt; \&amp;_delete;
        };
    };
};</pre>

<p>As in the previous article in this series, the leading underscore
convention saves us some aggravation here since <code>delete</code> is a Perl
keyword, and <code>read</code> is a core Perl function.</p>
<p>The only other thing to change here is that REST APIs normally return
JSON or XML. I prefer JSON since that's directly usable by the
JavaScript code that made the Ajax call to one of these APIs. One of the
best features of Dancer is that automatic JSON encoding is built right
in.</p>
<p>First, enable the feature by adding this to your <code>config.yml</code> file:</p>
<pre class="prettyprint">serializer: "JSON"</pre>

<p>That lets us write the <code>_create()</code> function referenced above as:</p>
<pre class="prettyprint">sub _create {
    my $params = request-&gt;params;
    my $db     = get_db_conn;
    
    if ($db-&gt;create_something($params-&gt;{arg1}, $params-&gt;{arg2})) {
        return {
            success =&gt; JSON::true,
            id      =&gt; $db-&gt;last_insert_id(),
        };
    }
    else {
        return {
            success =&gt; JSON::false,
            error   =&gt; 'failed to create record: ' . $db-&gt;last_error(),
        };
    }
}</pre>

<p>By telling Dancer that we want all routes to return JSON unless
explicitly told otherwise, we can simply return Perl data structures and
have Dancer translate them into JSON form for us. It will also
automatically set the response's HTTP <code>Content-Type</code> header to
<code>application/json</code>. Parsing and using that reply on the client side in
JavaScript is therefore trivial. Many web frameworks can consume such
APIs directly, such as jQuery via
<a href="https://api.jquery.com/jQuery.getJSON/"><code>$.getJSON()</code></a>.</p>
<p>Doing so does mean that your existing HTML-returning route handlers have
to be explicitly marked to return HTML instead:</p>
<pre class="prettyprint">get '/some/html/returning/route' =&gt; sub {
    send_as html =&gt; template '/some/template' =&gt; {
        some =&gt; 'parameters',
    };
};</pre>

<h2><a name="returning_the_same_data_in_both_html_and_json_forms"></a>Returning the Same Data in Both HTML and JSON Forms</h2>

<p>You might now be asking why you would arrange things as above, where the
default serializer is JSON and HTML-returning routes have to be
explicitly marked. If your application returns HTML more often than
JSON, this may seem backwards. Wouldn't it be simpler to leave the
default serializer unset, so that <code>template</code> calls and such return
normally, and mark the JSON-returning API route handlers explicitly
instead via <code>send_as JSON =&gt; ...</code>?</p>
<p>You could indeed do that, but then you lose a nice side benefit of this
arrangement: it makes it easy to define parallel route handlers for
returning HTML-rendered versions of APIs that return raw JSON data.</p>
<p>Consider this addition to the route handlers defined above:</p>
<pre class="prettyprint">package App::Parts::MajorFeature::SubFeature
use Dancer2 appname =&gt; 'App';

sub _get {
    send_as html =&gt; template 'parts/mf/sf' =&gt; {
        content =&gt; App::API::MajorFeature::SubFeature::_get(),
    }
}

prefix '/parts' =&gt; sub {
    prefix '/mf' =&gt; sub {
        prefix '/sf' =&gt; sub {
            get '' =&gt; \&amp;_get;
        };
    };
};</pre>

<p>Briefly, what this does is define a <code>/parts</code> route hierarchy that is
parallel to the <code>/api</code> hierarchy, with the former implemented in terms
of the latter. That is, the application's API returns JSON, and the
applications "parts" subsystem returns HTML renditions of the same data
returned by the JSON API. This works because the API route handlers are
defined to return raw Perl data structures, which we can consume
directly from other route handlers as above, or let Dancer render them
to JSON when those route handlers are called by a web client.</p>
<p>While you could consume these HTML fragments ("parts") via Ajax, you can
also save an HTTP round trip by textually including them into complete
web pages assembled by Dancer's template mechanism:</p>
<pre class="prettyprint">package App::MajorFeature::SubFeature
use Dancer2 appname =&gt; 'App';

sub _get {
    send_as html =&gt; template 'mf/sf' =&gt; {
        some =&gt; 'parameters',
        go   =&gt; 'here',
        part =&gt; App::Parts::MajorFeature::SubFeature::_get(),
    }
}

prefix '/mf' =&gt; sub {
    prefix '/sf' =&gt; sub {
        get '' =&gt; \&amp;_get;
    };
};</pre>

<p>The <code>/views/mf/sf.tt</code> template can then reference <code>part</code> to insert the
HTML fragment into the larger web page, without duplicating the HTML
code for that fragment.</p>
<p>This gives us three different ways to get the same data: as part of a
complete web page (<code>GET /mf/sf</code>), as an HTML fragment that we can
insert into an existing web page via Ajax on the browser side or textual
inclusion on the Dancer side (<code>GET /parts/mf/sf</code>), and as raw JSON data
that we could process on the browser side (<code>GET /api/mf/sf</code>).</p>
<p>This layered design pattern has two additional benefits besides avoiding
violations of the
<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY principle</a>:</p>
<p>First, textually including an HTML rendering of the raw data on the
server side as part of the initial HTTP page load saves an HTTP round
trip over the common alternative design, where the server simply returns
an empty HTML container which must be filled by JavaScript code with a
subsequent JavaScript Ajax call. HTTP round-trips are usually expensive
enough to add human-scale amounts of delay to your web app's response
time, so any time you spend to remove unnecessary round-trips usually
pays immediate tangible benefits.</p>
<p>Second, this design ensures that your web app returns an initial HTML
view of the data even to clients not running JavaScript. Even if you can
ensure that your normal web users will run JavaScript, you may gain some
SEO benefit by returning an HTML form of your web app's dynamic content
to web spiders that refuse to run embedded and referenced JavaScript
code.</p>
<p>This article series concludes with a scheme for
<a href="https://metacpan.org/module//2016/8">hot code reloading</a>, a very useful feature in any Dancer
app, but especially helpful as your app grows larger.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Warren Young for the Perl
Dancer Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>&#xa9; 2015, 2016 by Educational Technology Resources, licensed under
<a href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0</a></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
