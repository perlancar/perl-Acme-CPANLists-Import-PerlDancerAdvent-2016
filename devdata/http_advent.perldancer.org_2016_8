<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Automatic Restarts | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2016" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2016">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="automatic_restarts"></a>Automatic Restarts</h1>

<p>A common annoyance many of us share when developing web applications is
restarting our web application every time we edit files.</p>
<p>While we do not need to restart our web server when changing image,
JavaScript, CSS, or template files, we still require it when changing
our application code.</p>
<p>Dancer 1 had an option to reload the application on file changes but it
proved brittle and in some cases caused more annoyance than it prevented.</p>
<p>There are several ways to handle this nowadays. Let's go through them.</p>
<h2><a name="_code_plack__middleware__refresh__code_"></a><code>Plack::Middleware::Refresh</code></h2>

<p>The <a href="https://metacpan.org/module/Plack::Middleware::Refresh">Plack::Middleware::Refresh</a> module allows us to refresh your
application and all of its modules.</p>
<p>All we need to do is load this middleware in our handler:</p>
<pre class="prettyprint"># app.psgi
use MyApp;
use Plack::Builder;

builder {
    enable 'Refresh';
    MyApp-&gt;to_app;
};</pre>

<p>However, this will turn it on all the time under every environment.
We can control that by loading it only if we are in the development
environment:</p>
<pre class="prettyprint"># app.psgi
use MyApp;
use Plack::Builder;

builder {
    if ( $ENV{'PLACK_ENV'} eq 'development' ) {
        enable 'Refresh';
    }

    MyApp-&gt;to_app;
};</pre>

<p>However, this requires changing our handler. This will affect all
other developers as well, and might cause restarts while we're still
working on multiple files and cannot control whether it will restart.</p>
<p>There are other solutions that are likely to yield more flexibility.</p>
<h2><a name="_code_plackup__r__code__or__code_plackup__r__code_"></a><code>plackup -r</code> or <code>plackup -R</code></h2>

<p><a href="https://metacpan.org/module/Plack">Plack</a> comes with a built-in command to start a web server for our
web application. It doesn't start all web servers but it works for
Perl-based web servers such as <a href="https://metacpan.org/module/Starman">Starman</a> or <a href="https://metacpan.org/module/Gazelle">Gazelle</a>.</p>
<pre class="prettyprint"># start web server, restarting when a file in lib/ changes
plackup -r bin/app.psgi</pre>

<p>We may have renamed the <i>lib</i> directory. In this case, we will need to
use <code>-R</code> instead:</p>
<pre class="prettyprint"># assuming we lib/ to routes/
plackup -R bin,routes bin/app.psgi</pre>

<p>This will monitor both <i>bin</i> and <i>routes</i> so you can update your
code or your handler and the web server will restart automatically.</p>
<p>You can also monitor additional directories. Imagine having having a
templating system that uses compiled templates. You generated the
compiled ones during a start of the application. The original ones
would be stored in <i>templates</i> and compiled and stored in <i>views</i>.</p>
<pre class="prettyprint">plackup -R routes,templates bin/app.psgi</pre>

<p>Any change to <i>routes</i> directory or to <i>templates</i> will force a
restart, compiling your templates again and providing you with fresh
code.</p>
<h2><a name="_code_shotgun__code_"></a><code>Shotgun</code></h2>

<p>As a last resort, when the above approach aren't convenient or do
not perform well, you can use the <code>Shotgun</code> loader from
<a href="https://metacpan.org/module/Plack::Loader::Shotgun">Plack::Loader::Shotgun</a>.</p>
<p>It's quite simple and you can load it by calling it with <code>-L</code>:</p>
<pre class="prettyprint">plackup -L Shotgun bin/app.psgi</pre>

<p>Instead of watching and restarting, this loader simply forks and
runs each request with its own process. If you are loading heavy
modules and would like to speed it up, you can do so with <code>-M</code>:</p>
<pre class="prettyprint">plackup -MMoose -MDBIx::Class -L Shotgun bin/app.psgi</pre>

<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2016.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>Sawyer X.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
